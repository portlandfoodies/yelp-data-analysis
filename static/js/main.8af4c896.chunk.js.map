{"version":3,"sources":["serviceWorker.js","components/App.js","components/about.js","components/navbar.js","index.js","components/router.js","components/food-header.png"],"names":["Boolean","window","location","hostname","match","App","className","src","foodimg","style","width","align","backgroundImage","Component","About","state","markdown","fetch","then","response","text","setState","this","Container","href","source","Navbar","to","ReactDOM","render","basename","process","component","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"sKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mFCbeC,E,iLAIjB,OACE,yBAAKC,UAAU,OACb,6BACE,yBAAKC,IAAG,UAAKC,KAAWC,MACtB,CACEC,MAAQ,UAGZ,uBAAGC,MAAM,UAAT,+CAIF,yBAAKF,MAAO,CAACG,gBAAgB,OAAD,OAASJ,IAAT,a,GAhBHK,a,0BCFZC,E,YACnB,aAAc,IAAD,8BACX,+CACKC,MAAO,CACVC,SAAW,IAHF,E,iFAMO,IAAD,OAEjBC,MADmB,gGACDC,MAAK,SAAAC,GACrB,OAAOA,EAASC,UACfF,MAAK,SAAAE,GACN,EAAKC,SAAS,CACZL,SAAWI,S,+BAMR,IACAJ,EAAYM,KAAKP,MAAjBC,SACP,OAGE,6BACE,6BACA,6BAGA,kBAACO,EAAA,EAAD,KACE,uBAAGZ,MAAM,UAAS,8BAChB,2BAAG,uBAAGa,KAAK,gEAAR,wBACH,2BAAG,uBAAGA,KAAK,yDAAR,yBACH,6BACA,kBAAC,IAAD,CAAeC,OAAQT,Y,GAlCAH,aCCda,E,iLAGjB,OACE,yBAAKpB,UAAU,gEACb,yBAAKA,UAAU,IACb,wBAAIA,UAAU,sBACZ,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMqB,GAAG,IAAIrB,UAAU,YAAvB,UAEF,wBAAIA,UAAU,eACZ,kBAAC,IAAD,CAAMqB,GAAG,SAASrB,UAAU,YAA5B,iB,GAXsBO,aCIpCe,IAASC,OACL,kBAAC,IAAD,CAAeC,SAAUC,uBACrB,mBCLO,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAWN,IAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIF,UAAW3B,IACjC,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,SAASF,UAAWlB,QDAtC,OAEJqB,SAASC,eAAe,SJuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB,mBMrInBC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.8af4c896.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n//import logo from './logo.svg';\n//import './App.css';\nimport foodimg from './food-header.png'\nexport default class App extends Component {\n \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <img src={`${foodimg}`} style= {\n            {\n              width : \"100%\",\n            }\n          }/>\n          <p align='center'> Welcome to Yelp Data Analysis CS410/CS510</p>\n\n\n        </div>\n        <div style={{backgroundImage: `url(${foodimg})`}}>\n            \n        </div>\n\n      \n      </div>\n    );\n  }\n}\n\n\n","import React, { Component } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport {Container} from 'react-bootstrap'\nexport default class About extends Component {\n  constructor(){\n    super()\n    this.state ={\n      markdown : ''\n    }\n  }\n  componentDidMount(){\n    const readmefile = \"https://raw.githubusercontent.com/portlandfoodies/portlandfoodies.github.io/master/README.md\"\n    fetch(readmefile).then(response => {\n      return response.text()\n    }).then(text => {\n      this.setState({\n        markdown : text\n      }\n      )\n    })\n  }\n\n  render(){\n    const {markdown} = this.state\n    return(\n    \n      \n      <div>\n        <br />\n        <br />\n\n        \n        <Container>\n          <p align='center'><body>\n            <p><a href=\"https://github.com/portlandfoodies/portlandfoodies.github.io\">Project Github Repo</a></p>\n            <p><a href=\"https://github.com/portlandfoodies/yelp-data-analysis\">Project Webpage Repo</a></p>\n            <br />\n            <ReactMarkdown source={markdown}/>\n            </body>\n          </p>\n        </Container>\n      </div>\n      \n    )\n  }\n}","import React, { Component } from 'react'\nimport {Link} from 'react-router-dom'\n\n\nexport default class Navbar extends Component {\n\n  render(){\n    return(\n      <nav className=\"navbar fixed-top navbar-dark bg-dark navbar navbar-expand-sm\">\n        <div className=\"\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"navbar-item\">\n              <Link to=\"/\" className=\"nav-link\">Home </Link>\n            </li>\n            <li className=\"navbar-item\">\n              <Link to=\"/about\" className=\"nav-link\">About</Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Router from './components/router';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Router />\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport {HashRouter, Route, Switch} from 'react-router-dom'\nimport App from \"./App\";\nimport About from \"./about\"\nimport Navbar from \"./navbar\"\nexport default () => (  \n    <HashRouter>\n      <Route component={Navbar} />\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/about\" component={About} />\n      </Switch>\n    </HashRouter>\n  );","module.exports = __webpack_public_path__ + \"static/media/food-header.1afec609.png\";"],"sourceRoot":""}